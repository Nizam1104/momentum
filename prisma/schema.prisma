generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Core User Model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  timezone      String    @default("UTC")
  preferences   Json?     @default("{}")

  // Relationships
  accounts         Account[]
  sessions         Session[]
  days             Day[]
  projects         Project[]
  categories       Category[]
  tasks            Task[]
  notes             Note[]
  learningTopics   LearningTopic[]
  learningConcepts LearningConcept[]

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  @@index([email])
}

// Daily Check-in System
model Day {
  id     String   @id @default(cuid())
  date   DateTime @db.Date
  userId String

  
  // Daily reflection
  highlights     String?  @db.Text
  challenges     String?  @db.Text
  lessons        String?  @db.Text
  gratitude      String?  @db.Text
  tomorrowFocus  String?  @db.Text

  // Status
  isCompleted    Boolean  @default(false)

  // Relationships
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes          Note[]
  tasks          Task[]
  taskCompletions TaskCompletion[]

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([userId, date])
  @@index([userId, date])
  @@index([userId, createdAt])
}

// Enhanced Notes System
model Note {
  id      String @id @default(cuid())
  title   String?
  content String @db.Text

  // Metadata
  isPinned   Boolean @default(false)
  isArchived Boolean @default(false)

  // Relationships
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  dayId      String?
  day        Day?       @relation(fields: [dayId], references: [id], onDelete: Cascade)
  projectId  String?
  project    Project?   @relation(fields: [projectId], references: [id], onDelete: SetNull)
  categoryId String?
  category   Category?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  topicId    String?
  topic      LearningTopic?     @relation(fields: [topicId], references: [id], onDelete: SetNull)
  conceptId  String?
  concept    LearningConcept? @relation(fields: [conceptId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  @@index([dayId])
  @@index([projectId])
  @@index([categoryId])
  @@index([createdAt])
}


// Project Management System
model Project {
  id          String        @id @default(cuid())
  name        String
  description String?       @db.Text
  color       String        @default("#3B82F6")
  status      ProjectStatus @default(ACTIVE)
  priority    Priority      @default(MEDIUM)

  // Timeline
  startDate   DateTime?
  dueDate     DateTime?
  completedAt DateTime?

  // Progress tracking
  progress    Int           @default(0) // 0-100

  // Relationships
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId  String?
  category    Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  parentId    String?
  parent      Project?      @relation("ProjectHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  subprojects Project[]     @relation("ProjectHierarchy")

  tasks       Task[]
  notes       Note[]

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  @@index([userId])
  @@index([categoryId])
  @@index([status])
  @@index([dueDate])
  @@index([parentId])
}

enum ProjectStatus {
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
  ARCHIVED
}

// Task Management
model Task {
  id          String     @id @default(cuid())
  title       String
  description String?    @db.Text
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)

  // Timeline
  dueDate     DateTime?

  // Relationships
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId   String?
  project     Project?         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  dayId       String?
  day         Day?             @relation(fields: [dayId], references: [id], onDelete: Cascade)
  categoryId  String?
  category    Category?        @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  parentId    String?
  parent      Task?            @relation("TaskHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  subtasks    Task[]           @relation("TaskHierarchy")

  completions TaskCompletion[]

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  @@index([projectId])
  @@index([dayId])
  @@index([categoryId])
  @@index([status])
  @@index([dueDate])
  @@index([parentId])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Daily task completion tracking
model TaskCompletion {
  id     String @id @default(cuid())
  dayId  String
  day    Day    @relation(fields: [dayId], references: [id], onDelete: Cascade)
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  completedAt DateTime @default(now())
  notes       String?  @db.Text

  @@unique([dayId, taskId])
  @@index([dayId])
  @@index([taskId])
}


// (Removed Habit, HabitLog, HabitType, and TimeEntry models)

// Organization System
model Category {
  id          String  @id @default(cuid())
  name        String
  description String? @db.Text
  color       String  @default("#6B7280")
  icon        String?

  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  projects Project[]
  notes    Note[]
  tasks    Task[]
  learningTopics LearningTopic[]

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([userId, name])
  @@index([userId])
}



enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Learning Management System
model LearningTopic {
  id          String             @id @default(cuid())
  title       String
  description String?            @db.Text
  color       String             @default("#8B5CF6")
  priority    Priority           @default(MEDIUM)
  status      LearningTopicStatus @default(ACTIVE)

  
  // Timeline
  startDate   DateTime?
  targetDate  DateTime?
  completedAt DateTime?

  // Relationships
  userId      String
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId  String?
  category    Category?         @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  concepts    LearningConcept[]
  notes       Note[]

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  @@index([userId])
  @@index([categoryId])
  @@index([status])
  @@index([priority])
}

enum LearningTopicStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELLED
}

model LearningConcept {
  id          String              @id @default(cuid())
  title       String
  description String?             @db.Text
  content     String?             @db.Text
  resources   Json?               @default("[]") // Array of resource objects {title, url, type}
  status      LearningConceptStatus @default(NOT_STARTED)
  priority    Priority            @default(MEDIUM)

  // Progress and understanding
  understandingLevel Int          @default(1) // 1-5 scale
  timeSpent         Float?        @default(0) // in hours


  // Timeline
  startDate    DateTime?
  completedAt  DateTime?

  // Relationships
  userId       String
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  topicId      String
  topic        LearningTopic      @relation(fields: [topicId], references: [id], onDelete: Cascade)

  notes        Note[]

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  @@index([userId])
  @@index([topicId])
  @@index([status])
  @@index([priority])
}

enum LearningConceptStatus {
  NOT_STARTED
  IN_PROGRESS
  REVIEW
  COMPLETED
  MASTERED
}


// don't touch the following , as it is schema of auth js

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
