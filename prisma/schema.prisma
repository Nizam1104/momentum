generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


/* changes need to be done in next migration
add customization in notes titles
add notes type
*/


// Core User Model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  timezone      String    @default("UTC")
  preferences   Json?     @default("{}")

  // Relationships
  accounts         Account[]
  sessions         Session[]
  days             Day[]
  projects         Project[]
  categories       Category[]
  goals            Goal[]
  tags             Tag[]
  tasks            Task[]
  notes             Note[]

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  @@index([email])
}

// Daily Check-in System
model Day {
  id     String   @id @default(cuid())
  date   DateTime @db.Date
  userId String

  // Daily metrics and ratings
  energyLevel    Int?     @default(5) // 1-10 scale
  moodRating     Int?     @default(5) // 1-10 scale
  productivityRating Int? @default(5) // 1-10 scale
  sleepHours     Float?
  sleepQuality   Int?     @default(5) // 1-10 scale

  // Daily reflection
  highlights     String?  @db.Text
  challenges     String?  @db.Text
  lessons        String?  @db.Text
  gratitude      String?  @db.Text
  tomorrowFocus  String?  @db.Text

  // Status
  isCompleted    Boolean  @default(false)

  // Relationships
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes          Note[]
  tasks          Task[]
  dailyGoals     DailyGoal[]
  taskCompletions TaskCompletion[]

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([userId, date])
  @@index([userId, date])
  @@index([userId, createdAt])
}

// Enhanced Notes System
model Note {
  id      String @id @default(cuid())
  title   String?
  content String @db.Text
  type    NoteType @default(GENERAL)

  // Metadata
  isPinned   Boolean @default(false)
  isArchived Boolean @default(false)

  // Relationships
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  dayId      String?
  day        Day?       @relation(fields: [dayId], references: [id], onDelete: Cascade)
  projectId  String?
  project    Project?   @relation(fields: [projectId], references: [id], onDelete: SetNull)
  categoryId String?
  category   Category?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  tags       NoteTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  @@index([dayId])
  @@index([projectId])
  @@index([categoryId])
  @@index([type])
  @@index([createdAt])
}

enum NoteType {
  GENERAL
  MEETING
  IDEA
  LEARNING
  REFLECTION
  PLANNING
}

// Project Management System
model Project {
  id          String        @id @default(cuid())
  name        String
  description String?       @db.Text
  color       String        @default("#3B82F6")
  status      ProjectStatus @default(ACTIVE)
  priority    Priority      @default(MEDIUM)

  // Timeline
  startDate   DateTime?
  dueDate     DateTime?
  completedAt DateTime?

  // Progress tracking
  progress    Int           @default(0) // 0-100

  // Relationships
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId  String?
  category    Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  parentId    String?
  parent      Project?      @relation("ProjectHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  subprojects Project[]     @relation("ProjectHierarchy")

  tasks       Task[]
  notes       Note[]
  goals       Goal[]
  tags        ProjectTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  @@index([userId])
  @@index([categoryId])
  @@index([status])
  @@index([dueDate])
  @@index([parentId])
}

enum ProjectStatus {
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
  ARCHIVED
}

// Task Management
model Task {
  id          String     @id @default(cuid())
  title       String
  description String?    @db.Text
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)

  // Timeline
  dueDate     DateTime?
  completedAt DateTime?

  // Time estimation
  estimatedMinutes Int?
  actualMinutes    Int?

  // Relationships
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId   String?
  project     Project?         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  dayId       String?
  day         Day?             @relation(fields: [dayId], references: [id], onDelete: Cascade)
  categoryId  String?
  category    Category?        @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  parentId    String?
  parent      Task?            @relation("TaskHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  subtasks    Task[]           @relation("TaskHierarchy")

  completions TaskCompletion[]
  tags        TaskTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  @@index([projectId])
  @@index([dayId])
  @@index([categoryId])
  @@index([status])
  @@index([dueDate])
  @@index([parentId])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Daily task completion tracking
model TaskCompletion {
  id     String @id @default(cuid())
  dayId  String
  day    Day    @relation(fields: [dayId], references: [id], onDelete: Cascade)
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  completedAt DateTime @default(now())
  notes       String?  @db.Text

  @@unique([dayId, taskId])
  @@index([dayId])
  @@index([taskId])
}

// Enhanced Goal System
model Goal {
  id          String     @id @default(cuid())
  title       String
  description String?    @db.Text
  type        GoalType   @default(PERSONAL)
  status      GoalStatus @default(ACTIVE)
  priority    Priority   @default(MEDIUM)
  color       String     @default("#10B981")

  // Timeline
  startDate   DateTime?
  targetDate  DateTime?
  completedAt DateTime?

  // Progress tracking
  isQuantifiable Boolean @default(false)
  targetValue    Float?
  currentValue   Float?  @default(0)
  unit           String?

  // Relationships
  userId     String
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId  String?
  project    Project?     @relation(fields: [projectId], references: [id], onDelete: SetNull)
  categoryId String?
  category   Category?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  parentId   String?
  parent     Goal?        @relation("GoalHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  subgoals   Goal[]       @relation("GoalHierarchy")

  dailyGoals DailyGoal[]
  tags       GoalTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  @@index([userId])
  @@index([projectId])
  @@index([categoryId])
  @@index([type])
  @@index([status])
  @@index([targetDate])
  @@index([parentId])
}

enum GoalType {
  PERSONAL
  PROFESSIONAL
  HEALTH
  FINANCIAL
  LEARNING
  RELATIONSHIP
  CREATIVE
}

enum GoalStatus {
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

// Daily goal tracking
model DailyGoal {
  id       String            @id @default(cuid())
  dayId    String
  day      Day               @relation(fields: [dayId], references: [id], onDelete: Cascade)
  goalId   String
  goal     Goal              @relation(fields: [goalId], references: [id], onDelete: Cascade)

  status   DailyGoalStatus   @default(NOT_STARTED)
  progress Float             @default(0) // For quantifiable goals
  notes    String?           @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([dayId, goalId])
  @@index([dayId])
  @@index([goalId])
}

enum DailyGoalStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

// (Removed Habit, HabitLog, HabitType, and TimeEntry models)

// Organization System
model Category {
  id          String  @id @default(cuid())
  name        String
  description String? @db.Text
  color       String  @default("#6B7280")
  icon        String?

  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  projects Project[]
  notes    Note[]
  tasks    Task[]
  goals    Goal[]

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([userId, name])
  @@index([userId])
}

// Tagging System
model Tag {
  id    String @id @default(cuid())
  name  String
  color String @default("#9CA3AF")

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  notes    NoteTag[]
  projects ProjectTag[]
  tasks    TaskTag[]
  goals    GoalTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([userId, name])
  @@index([userId])
}

// Tag relationship tables
model NoteTag {
  noteId String
  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade)
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([noteId, tagId])
  @@index([noteId])
  @@index([tagId])
}

model ProjectTag {
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tagId     String
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([projectId, tagId])
  @@index([projectId])
  @@index([tagId])
}

model TaskTag {
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([taskId, tagId])
  @@index([taskId])
  @@index([tagId])
}

model GoalTag {
  goalId String
  goal   Goal   @relation(fields: [goalId], references: [id], onDelete: Cascade)
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([goalId, tagId])
  @@index([goalId])
  @@index([tagId])
}


enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// don't touch the following , as it is schema of auth js

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
